'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace OTP
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="OTPServiceSoap", [Namespace]:="http://softwel.com.np/")>  _
    Partial Public Class OTPService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ComputeOTPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private VerifyOTPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemainingTimeInSecondOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.OTPForm.My.MySettings.Default.OTPForm_OTP_OTPService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ComputeOTPCompleted As ComputeOTPCompletedEventHandler
        
        '''<remarks/>
        Public Event VerifyOTPCompleted As VerifyOTPCompletedEventHandler
        
        '''<remarks/>
        Public Event RemainingTimeInSecondCompleted As RemainingTimeInSecondCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://softwel.com.np/ComputeOTP", RequestNamespace:="http://softwel.com.np/", ResponseNamespace:="http://softwel.com.np/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ComputeOTP(ByVal key As String) As String
            Dim results() As Object = Me.Invoke("ComputeOTP", New Object() {key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ComputeOTPAsync(ByVal key As String)
            Me.ComputeOTPAsync(key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ComputeOTPAsync(ByVal key As String, ByVal userState As Object)
            If (Me.ComputeOTPOperationCompleted Is Nothing) Then
                Me.ComputeOTPOperationCompleted = AddressOf Me.OnComputeOTPOperationCompleted
            End If
            Me.InvokeAsync("ComputeOTP", New Object() {key}, Me.ComputeOTPOperationCompleted, userState)
        End Sub
        
        Private Sub OnComputeOTPOperationCompleted(ByVal arg As Object)
            If (Not (Me.ComputeOTPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ComputeOTPCompleted(Me, New ComputeOTPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://softwel.com.np/VerifyOTP", RequestNamespace:="http://softwel.com.np/", ResponseNamespace:="http://softwel.com.np/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function VerifyOTP(ByVal otpcode As String, ByVal key As String) As Boolean
            Dim results() As Object = Me.Invoke("VerifyOTP", New Object() {otpcode, key})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub VerifyOTPAsync(ByVal otpcode As String, ByVal key As String)
            Me.VerifyOTPAsync(otpcode, key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VerifyOTPAsync(ByVal otpcode As String, ByVal key As String, ByVal userState As Object)
            If (Me.VerifyOTPOperationCompleted Is Nothing) Then
                Me.VerifyOTPOperationCompleted = AddressOf Me.OnVerifyOTPOperationCompleted
            End If
            Me.InvokeAsync("VerifyOTP", New Object() {otpcode, key}, Me.VerifyOTPOperationCompleted, userState)
        End Sub
        
        Private Sub OnVerifyOTPOperationCompleted(ByVal arg As Object)
            If (Not (Me.VerifyOTPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VerifyOTPCompleted(Me, New VerifyOTPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://softwel.com.np/RemainingTimeInSecond", RequestNamespace:="http://softwel.com.np/", ResponseNamespace:="http://softwel.com.np/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemainingTimeInSecond(ByVal key As String) As Long
            Dim results() As Object = Me.Invoke("RemainingTimeInSecond", New Object() {key})
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemainingTimeInSecondAsync(ByVal key As String)
            Me.RemainingTimeInSecondAsync(key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemainingTimeInSecondAsync(ByVal key As String, ByVal userState As Object)
            If (Me.RemainingTimeInSecondOperationCompleted Is Nothing) Then
                Me.RemainingTimeInSecondOperationCompleted = AddressOf Me.OnRemainingTimeInSecondOperationCompleted
            End If
            Me.InvokeAsync("RemainingTimeInSecond", New Object() {key}, Me.RemainingTimeInSecondOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemainingTimeInSecondOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemainingTimeInSecondCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemainingTimeInSecondCompleted(Me, New RemainingTimeInSecondCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ComputeOTPCompletedEventHandler(ByVal sender As Object, ByVal e As ComputeOTPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ComputeOTPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub VerifyOTPCompletedEventHandler(ByVal sender As Object, ByVal e As VerifyOTPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class VerifyOTPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub RemainingTimeInSecondCompletedEventHandler(ByVal sender As Object, ByVal e As RemainingTimeInSecondCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemainingTimeInSecondCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
    End Class
End Namespace
